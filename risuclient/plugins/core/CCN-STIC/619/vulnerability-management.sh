#!/bin/bash
# Copyright (C) 2024 Pablo Iranzo GÃ³mez <Pablo.Iranzo@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# long_name: Validate vulnerability management configuration
# description: Validate updates, patches and security compliance for CCN-STIC-619
# priority: 130
# bugzilla: https://www.ccn-cert.cni.es/pdf/guias/series-ccn-stic/guias-de-acceso-publico-ccn-stic/3674-ccn-stic-619-implementacion-de-seguridad-sobre-centos7/file.html

# Load common functions
[[ -f "${RISU_BASE}/common-functions.sh" ]] && . "${RISU_BASE}/common-functions.sh"

flag=0

echo "Checking vulnerability management configuration..." >&2

# Check yum/dnf configuration
YUM_CONF="${RISU_ROOT}/etc/yum.conf"
DNF_CONF="${RISU_ROOT}/etc/dnf/dnf.conf"

if [[ -f ${YUM_CONF} ]]; then
    echo "Checking yum configuration..." >&2

    # Check for automatic updates
    if ! grep -q "^assumeyes" "${YUM_CONF}"; then
        echo "Yum assumeyes not configured (consider for automation)" >&2
    fi

    # Check for GPG key verification
    if ! grep -q "^gpgcheck=1" "${YUM_CONF}"; then
        echo "Yum GPG checking not enabled" >&2
        flag=1
    fi

    # Check for repository GPG key verification
    if ! grep -q "^repo_gpgcheck=1" "${YUM_CONF}"; then
        echo "Yum repository GPG checking not enabled" >&2
        flag=1
    fi

    # Check for package signature verification
    if ! grep -q "^localpkg_gpgcheck=1" "${YUM_CONF}"; then
        echo "Yum local package GPG checking not enabled" >&2
        flag=1
    fi
elif [[ -f ${DNF_CONF} ]]; then
    echo "Checking dnf configuration..." >&2

    # Check for GPG key verification
    if ! grep -q "^gpgcheck=1" "${DNF_CONF}"; then
        echo "DNF GPG checking not enabled" >&2
        flag=1
    fi

    # Check for repository GPG key verification
    if ! grep -q "^repo_gpgcheck=1" "${DNF_CONF}"; then
        echo "DNF repository GPG checking not enabled" >&2
        flag=1
    fi
else
    echo "No package manager configuration found" >&2
    flag=1
fi

# Check for automatic updates configuration
YUM_CRON_CONF="${RISU_ROOT}/etc/yum/yum-cron.conf"
YUM_CRON_HOURLY_CONF="${RISU_ROOT}/etc/yum/yum-cron-hourly.conf"
DNF_AUTOMATIC_CONF="${RISU_ROOT}/etc/dnf/automatic.conf"

if [[ -f ${YUM_CRON_CONF} ]]; then
    echo "Checking yum-cron configuration..." >&2

    # Check if automatic updates are enabled
    if ! grep -q "^update_cmd = security" "${YUM_CRON_CONF}"; then
        echo "Yum-cron not configured for security updates" >&2
        flag=1
    fi

    # Check if automatic application is enabled
    if ! grep -q "^apply_updates = yes" "${YUM_CRON_CONF}"; then
        echo "Yum-cron not configured to apply updates automatically" >&2
        flag=1
    fi

    # Check for notification settings
    if ! grep -q "^emit_via = email" "${YUM_CRON_CONF}"; then
        echo "Yum-cron email notifications not configured" >&2
        flag=1
    fi
elif [[ -f ${DNF_AUTOMATIC_CONF} ]]; then
    echo "Checking dnf-automatic configuration..." >&2

    # Check if automatic updates are enabled
    if ! grep -q "^upgrade_type = security" "${DNF_AUTOMATIC_CONF}"; then
        echo "DNF-automatic not configured for security updates" >&2
        flag=1
    fi

    # Check if automatic application is enabled
    if ! grep -q "^apply_updates = yes" "${DNF_AUTOMATIC_CONF}"; then
        echo "DNF-automatic not configured to apply updates automatically" >&2
        flag=1
    fi
else
    echo "No automatic updates configuration found" >&2
    flag=1
fi

# Check for package repository configuration
REPOS_DIR="${RISU_ROOT}/etc/yum.repos.d"
if [[ -d ${REPOS_DIR} ]]; then
    echo "Checking repository configuration..." >&2

    # Check for enabled repositories
    enabled_repos=$(grep -l "^enabled=1" "${REPOS_DIR}"/*.repo 2>/dev/null | wc -l)
    if [[ ${enabled_repos} -eq 0 ]]; then
        echo "No enabled repositories found" >&2
        flag=1
    fi

    # Check for GPG key verification in repositories
    for repo_file in "${REPOS_DIR}"/*.repo; do
        if [[ -f ${repo_file} ]]; then
            repo_name=$(basename "${repo_file}")

            # Check if GPG checking is enabled
            if ! grep -q "^gpgcheck=1" "${repo_file}"; then
                echo "Repository ${repo_name} does not have GPG checking enabled" >&2
                flag=1
            fi

            # Check for GPG key presence
            if ! grep -q "^gpgkey=" "${repo_file}"; then
                echo "Repository ${repo_name} does not have GPG key configured" >&2
                flag=1
            fi
        fi
    done
fi

# Check for security updates status
SECURITY_UPDATES_FILE="${RISU_ROOT}/sos_commands/yum/yum_check-update"
if [[ -f ${SECURITY_UPDATES_FILE} ]]; then
    echo "Checking for available security updates..." >&2

    # Count available updates
    available_updates=$(grep -c "^[a-zA-Z]" "${SECURITY_UPDATES_FILE}" 2>/dev/null || echo "0")
    if [[ ${available_updates} -gt 0 ]]; then
        echo "Available package updates: ${available_updates}" >&2
        flag=1
    fi
fi

# Check for installed packages with known vulnerabilities
INSTALLED_PACKAGES_FILE="${RISU_ROOT}/sos_commands/rpm/rpm_-qa_--queryformat_NAME_VERSION-RELEASE.ARCH_INSTALLTIME_date_--last"
if [[ -f ${INSTALLED_PACKAGES_FILE} ]]; then
    echo "Checking installed packages..." >&2

    # Check for packages that should be removed or updated
    VULNERABLE_PACKAGES=(
        "telnet"
        "rsh"
        "rlogin"
        "rcp"
        "rexec"
        "tftp"
        "ypserv"
        "ypbind"
        "talk"
        "finger"
        "xinetd"
    )

    for package in "${VULNERABLE_PACKAGES[@]}"; do
        if grep -q "^${package}" "${INSTALLED_PACKAGES_FILE}"; then
            echo "Vulnerable package installed: ${package}" >&2
            flag=1
        fi
    done
fi

# Check for kernel version and security patches
KERNEL_VERSION_FILE="${RISU_ROOT}/sos_commands/kernel/uname_-a"
if [[ -f ${KERNEL_VERSION_FILE} ]]; then
    echo "Checking kernel version..." >&2

    kernel_version=$(cat "${KERNEL_VERSION_FILE}")
    echo "Kernel version: ${kernel_version}" >&2

    # Check for old kernel versions (simplified check)
    if [[ ${kernel_version} == *"2.6."* ]]; then
        echo "Very old kernel version detected" >&2
        flag=1
    fi
fi

# Check for system update history
YUM_HISTORY_FILE="${RISU_ROOT}/sos_commands/yum/yum_history"
if [[ -f ${YUM_HISTORY_FILE} ]]; then
    echo "Checking system update history..." >&2

    # Check for recent updates
    recent_updates=$(head -10 "${YUM_HISTORY_FILE}" | grep -c "Update" 2>/dev/null || echo "0")
    recent_updates=${recent_updates// /}      # Remove any spaces
    recent_updates=${recent_updates//[^0-9]/} # Keep only numbers
    if [[ ${recent_updates:-0} -eq 0 ]]; then
        echo "No recent system updates found" >&2
        flag=1
    fi
fi

# Check for security patches compliance
SECURITY_PATCHES_COMPLIANCE=(
    "openssl"
    "openssh"
    "kernel"
    "glibc"
    "bash"
    "sudo"
    "systemd"
    "dbus"
    "gnutls"
    "nss"
    "libxml2"
    "python"
    "java"
    "firefox"
    "thunderbird"
)

if [[ -f ${INSTALLED_PACKAGES_FILE} ]]; then
    echo "Checking security-critical packages..." >&2

    for package in "${SECURITY_PATCHES_COMPLIANCE[@]}"; do
        if grep -q "^${package}" "${INSTALLED_PACKAGES_FILE}"; then
            echo "Security-critical package found: ${package}" >&2
            # This is informational - packages should be regularly updated
        fi
    done
fi

# Check for vulnerability scanning tools
VULNERABILITY_SCANNERS=(
    "nessus"
    "openvas"
    "nikto"
    "nmap"
    "lynis"
    "chkrootkit"
    "rkhunter"
    "aide"
    "tripwire"
    "samhain"
)

if [[ -f ${INSTALLED_PACKAGES_FILE} ]]; then
    echo "Checking for vulnerability scanning tools..." >&2

    scanners_found=0
    for scanner in "${VULNERABILITY_SCANNERS[@]}"; do
        if grep -q "^${scanner}" "${INSTALLED_PACKAGES_FILE}"; then
            echo "Vulnerability scanner found: ${scanner}" >&2
            scanners_found=1
        fi
    done

    if [[ ${scanners_found} -eq 0 ]]; then
        echo "No vulnerability scanning tools found" >&2
        flag=1
    fi
fi

# Check for intrusion detection systems
IDS_TOOLS=(
    "aide"
    "tripwire"
    "samhain"
    "ossec"
    "snort"
    "suricata"
    "fail2ban"
    "denyhosts"
)

if [[ -f ${INSTALLED_PACKAGES_FILE} ]]; then
    echo "Checking for intrusion detection systems..." >&2

    ids_found=0
    for ids_tool in "${IDS_TOOLS[@]}"; do
        if grep -q "^${ids_tool}" "${INSTALLED_PACKAGES_FILE}"; then
            echo "IDS tool found: ${ids_tool}" >&2
            ids_found=1
        fi
    done

    if [[ ${ids_found} -eq 0 ]]; then
        echo "No intrusion detection systems found" >&2
        flag=1
    fi
fi

# Check for antivirus software
ANTIVIRUS_TOOLS=(
    "clamav"
    "sophos"
    "mcafee"
    "symantec"
    "kaspersky"
    "eset"
    "bitdefender"
    "avast"
    "avg"
)

if [[ -f ${INSTALLED_PACKAGES_FILE} ]]; then
    echo "Checking for antivirus software..." >&2

    antivirus_found=0
    for av_tool in "${ANTIVIRUS_TOOLS[@]}"; do
        if grep -q "^${av_tool}" "${INSTALLED_PACKAGES_FILE}"; then
            echo "Antivirus software found: ${av_tool}" >&2
            antivirus_found=1
        fi
    done

    if [[ ${antivirus_found} -eq 0 ]]; then
        echo "No antivirus software found" >&2
        # This might be OK for servers, so don't fail
    fi
fi

# Check for system backup configuration
BACKUP_TOOLS=(
    "rsync"
    "tar"
    "dump"
    "backup"
    "bacula"
    "amanda"
    "duplicity"
    "rdiff-backup"
    "rsnapshot"
)

if [[ -f ${INSTALLED_PACKAGES_FILE} ]]; then
    echo "Checking for backup tools..." >&2

    backup_found=0
    for backup_tool in "${BACKUP_TOOLS[@]}"; do
        if grep -q "^${backup_tool}" "${INSTALLED_PACKAGES_FILE}"; then
            echo "Backup tool found: ${backup_tool}" >&2
            backup_found=1
        fi
    done

    if [[ ${backup_found} -eq 0 ]]; then
        echo "No backup tools found" >&2
        flag=1
    fi
fi

# Check for compliance monitoring tools
COMPLIANCE_TOOLS=(
    "scap-security-guide"
    "openscap"
    "oscap"
    "compliance-tools"
    "lynis"
    "inspec"
    "nessus-agent"
)

if [[ -f ${INSTALLED_PACKAGES_FILE} ]]; then
    echo "Checking for compliance monitoring tools..." >&2

    compliance_found=0
    for compliance_tool in "${COMPLIANCE_TOOLS[@]}"; do
        if grep -q "^${compliance_tool}" "${INSTALLED_PACKAGES_FILE}"; then
            echo "Compliance tool found: ${compliance_tool}" >&2
            compliance_found=1
        fi
    done

    if [[ ${compliance_found} -eq 0 ]]; then
        echo "No compliance monitoring tools found" >&2
        flag=1
    fi
fi

# Check for security updates configuration in cron
CRON_SECURITY_UPDATES="${RISU_ROOT}/etc/cron.d/security-updates"
if [[ -f ${CRON_SECURITY_UPDATES} ]]; then
    echo "Security updates cron job configured" >&2
else
    echo "No security updates cron job found" >&2
    flag=1
fi

# Check for system monitoring
MONITORING_TOOLS=(
    "nagios"
    "zabbix"
    "icinga"
    "monit"
    "collectd"
    "munin"
    "cacti"
    "ganglia"
    "prometheus"
    "grafana"
)

if [[ -f ${INSTALLED_PACKAGES_FILE} ]]; then
    echo "Checking for system monitoring tools..." >&2

    monitoring_found=0
    for monitoring_tool in "${MONITORING_TOOLS[@]}"; do
        if grep -q "^${monitoring_tool}" "${INSTALLED_PACKAGES_FILE}"; then
            echo "Monitoring tool found: ${monitoring_tool}" >&2
            monitoring_found=1
        fi
    done

    if [[ ${monitoring_found} -eq 0 ]]; then
        echo "No system monitoring tools found" >&2
        flag=1
    fi
fi

if [[ $flag -eq 1 ]]; then
    exit ${RC_FAILED}
else
    exit ${RC_OKAY}
fi
